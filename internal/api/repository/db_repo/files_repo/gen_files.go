///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package files_repo

import (
	"fmt"

	"github.com/YeHeng/go-web-api/internal/api/repository/db_repo"
	repo "github.com/YeHeng/go-web-api/internal/pkg/db"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Files {
	return new(Files)
}

func NewQueryBuilder() *filesRepoQueryBuilder {
	return new(filesRepoQueryBuilder)
}

func (t *Files) Create() (id int64, err error) {
	if err = repo.GetDb().Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type filesRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *filesRepoQueryBuilder) buildQuery() *gorm.DB {
	ret := repo.GetDb()
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *filesRepoQueryBuilder) Updates(m map[string]interface{}) (err error) {
	db := repo.GetDb().Model(&Files{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *filesRepoQueryBuilder) Delete() (err error) {
	db := repo.GetDb()
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Files{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *filesRepoQueryBuilder) Count() (int64, error) {
	var c int64
	res := qb.buildQuery().Model(&Files{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *filesRepoQueryBuilder) First() (*Files, error) {
	ret := &Files{}
	res := qb.buildQuery().First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *filesRepoQueryBuilder) QueryOne() (*Files, error) {
	qb.limit = 1
	ret, err := qb.QueryAll()
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *filesRepoQueryBuilder) QueryAll() ([]*Files, error) {
	var ret []*Files
	err := qb.buildQuery().Find(&ret).Error
	return ret, err
}

func (qb *filesRepoQueryBuilder) Limit(limit int) *filesRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *filesRepoQueryBuilder) Offset(offset int) *filesRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *filesRepoQueryBuilder) WhereId(p db_repo.Predicate, value int64) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WhereIdIn(value []int64) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WhereIdNotIn(value []int64) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) OrderById(asc bool) *filesRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *filesRepoQueryBuilder) WhereTorrentId(p db_repo.Predicate, value int64) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "torrent_id", p),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WhereTorrentIdIn(value []int64) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "torrent_id", "IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WhereTorrentIdNotIn(value []int64) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "torrent_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) OrderByTorrentId(asc bool) *filesRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "torrent_id "+order)
	return qb
}

func (qb *filesRepoQueryBuilder) WhereSize(p db_repo.Predicate, value int64) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "size", p),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WhereSizeIn(value []int64) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "size", "IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WhereSizeNotIn(value []int64) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "size", "NOT IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) OrderBySize(asc bool) *filesRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "size "+order)
	return qb
}

func (qb *filesRepoQueryBuilder) WherePath(p db_repo.Predicate, value string) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "path", p),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WherePathIn(value []string) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "path", "IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WherePathNotIn(value []string) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "path", "NOT IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) OrderByPath(asc bool) *filesRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "path "+order)
	return qb
}

func (qb *filesRepoQueryBuilder) WhereIsReadme(p db_repo.Predicate, value int32) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_readme", p),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WhereIsReadmeIn(value []int32) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_readme", "IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WhereIsReadmeNotIn(value []int32) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_readme", "NOT IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) OrderByIsReadme(asc bool) *filesRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_readme "+order)
	return qb
}

func (qb *filesRepoQueryBuilder) WhereContent(p db_repo.Predicate, value string) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", p),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WhereContentIn(value []string) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) WhereContentNotIn(value []string) *filesRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "NOT IN"),
		value,
	})
	return qb
}

func (qb *filesRepoQueryBuilder) OrderByContent(asc bool) *filesRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "content "+order)
	return qb
}
