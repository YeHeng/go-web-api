///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package torrents_repo

import (
	"fmt"
	"time"

	"github.com/YeHeng/go-web-api/internal/api/repository/db_repo"
	repo "github.com/YeHeng/go-web-api/internal/pkg/db"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Torrents {
	return new(Torrents)
}

func NewQueryBuilder() *torrentsRepoQueryBuilder {
	return new(torrentsRepoQueryBuilder)
}

func (t *Torrents) Create() (id int64, err error) {
	if err = repo.GetDb().Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type torrentsRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *torrentsRepoQueryBuilder) buildQuery() *gorm.DB {
	ret := repo.GetDb()
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *torrentsRepoQueryBuilder) Updates(m map[string]interface{}) (err error) {
	db := repo.GetDb().Model(&Torrents{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *torrentsRepoQueryBuilder) Delete() (err error) {
	db := repo.GetDb()
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Torrents{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *torrentsRepoQueryBuilder) Count() (int64, error) {
	var c int64
	res := qb.buildQuery().Model(&Torrents{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *torrentsRepoQueryBuilder) First() (*Torrents, error) {
	ret := &Torrents{}
	res := qb.buildQuery().First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *torrentsRepoQueryBuilder) QueryOne() (*Torrents, error) {
	qb.limit = 1
	ret, err := qb.QueryAll()
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *torrentsRepoQueryBuilder) QueryAll() ([]*Torrents, error) {
	var ret []*Torrents
	err := qb.buildQuery().Find(&ret).Error
	return ret, err
}

func (qb *torrentsRepoQueryBuilder) Limit(limit int) *torrentsRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *torrentsRepoQueryBuilder) Offset(offset int) *torrentsRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereId(p db_repo.Predicate, value int64) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereIdIn(value []int64) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereIdNotIn(value []int64) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) OrderById(asc bool) *torrentsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereInfoHash(p db_repo.Predicate, value []byte) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "info_hash", p),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereInfoHashIn(value [][]byte) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "info_hash", "IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereInfoHashNotIn(value [][]byte) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "info_hash", "NOT IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) OrderByInfoHash(asc bool) *torrentsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "info_hash "+order)
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereTotalSize(p db_repo.Predicate, value uint64) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "total_size", p),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereTotalSizeIn(value []uint64) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "total_size", "IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereTotalSizeNotIn(value []uint64) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "total_size", "NOT IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) OrderByTotalSize(asc bool) *torrentsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "total_size "+order)
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereName(p db_repo.Predicate, value string) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereNameIn(value []string) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereNameNotIn(value []string) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) OrderByName(asc bool) *torrentsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereCreateOn(p db_repo.Predicate, value time.Time) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_on", p),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereCreateOnIn(value []time.Time) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_on", "IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereCreateOnNotIn(value []time.Time) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_on", "NOT IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) OrderByCreateOn(asc bool) *torrentsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_on "+order)
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereModifiedOn(p db_repo.Predicate, value time.Time) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modified_on", p),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereModifiedOnIn(value []time.Time) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modified_on", "IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) WhereModifiedOnNotIn(value []time.Time) *torrentsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modified_on", "NOT IN"),
		value,
	})
	return qb
}

func (qb *torrentsRepoQueryBuilder) OrderByModifiedOn(asc bool) *torrentsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "modified_on "+order)
	return qb
}
