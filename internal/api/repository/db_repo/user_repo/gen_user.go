///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package user_repo

import (
	"fmt"
	"time"

	"github.com/YeHeng/go-web-api/internal/api/repository/db_repo"
	repo "github.com/YeHeng/go-web-api/internal/pkg/db"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *User {
	return new(User)
}

func NewQueryBuilder() *userRepoQueryBuilder {
	return new(userRepoQueryBuilder)
}

func (t *User) Create() (id int64, err error) {
	if err = repo.GetDb().Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type userRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *userRepoQueryBuilder) buildQuery() *gorm.DB {
	ret := repo.GetDb()
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *userRepoQueryBuilder) Updates(m map[string]interface{}) (err error) {
	db := repo.GetDb().Model(&User{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *userRepoQueryBuilder) Delete() (err error) {
	db := repo.GetDb()
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&User{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *userRepoQueryBuilder) Count() (int64, error) {
	var c int64
	res := qb.buildQuery().Model(&User{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *userRepoQueryBuilder) First() (*User, error) {
	ret := &User{}
	res := qb.buildQuery().First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *userRepoQueryBuilder) QueryOne() (*User, error) {
	qb.limit = 1
	ret, err := qb.QueryAll()
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *userRepoQueryBuilder) QueryAll() ([]*User, error) {
	var ret []*User
	err := qb.buildQuery().Find(&ret).Error
	return ret, err
}

func (qb *userRepoQueryBuilder) Limit(limit int) *userRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *userRepoQueryBuilder) Offset(offset int) *userRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *userRepoQueryBuilder) WhereId(p db_repo.Predicate, value int64) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereIdIn(value []int64) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereIdNotIn(value []int64) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) OrderById(asc bool) *userRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *userRepoQueryBuilder) WhereUsername(p db_repo.Predicate, value string) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", p),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereUsernameIn(value []string) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", "IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereUsernameNotIn(value []string) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) OrderByUsername(asc bool) *userRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "username "+order)
	return qb
}

func (qb *userRepoQueryBuilder) WherePassword(p db_repo.Predicate, value string) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", p),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WherePasswordIn(value []string) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WherePasswordNotIn(value []string) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) OrderByPassword(asc bool) *userRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "password "+order)
	return qb
}

func (qb *userRepoQueryBuilder) WhereMobile(p db_repo.Predicate, value string) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "mobile", p),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereMobileIn(value []string) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "mobile", "IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereMobileNotIn(value []string) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "mobile", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) OrderByMobile(asc bool) *userRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "mobile "+order)
	return qb
}

func (qb *userRepoQueryBuilder) WhereIsDeleted(p db_repo.Predicate, value int32) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereIsDeletedIn(value []int32) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereIsDeletedNotIn(value []int32) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) OrderByIsDeleted(asc bool) *userRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}

func (qb *userRepoQueryBuilder) WhereCreatedTime(p db_repo.Predicate, value time.Time) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_time", p),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereCreatedTimeIn(value []time.Time) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_time", "IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereCreatedTimeNotIn(value []time.Time) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) OrderByCreatedTime(asc bool) *userRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_time "+order)
	return qb
}

func (qb *userRepoQueryBuilder) WhereUpdateTime(p db_repo.Predicate, value time.Time) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_time", p),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereUpdateTimeIn(value []time.Time) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_time", "IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) WhereUpdateTimeNotIn(value []time.Time) *userRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userRepoQueryBuilder) OrderByUpdateTime(asc bool) *userRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "update_time "+order)
	return qb
}
